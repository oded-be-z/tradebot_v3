trigger:
  branches:
    include:
    - master

variables:
- group: TradeBot keys    # Your variable group with all API keys

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build FinanceBot Pro'
    steps:
    # Checkout with full history
    - checkout: self
      fetchDepth: 0
      displayName: 'Checkout code'
    
    # Install Node.js
    - task: NodeTool@0
      inputs:
        versionSpec: '22.x'
      displayName: 'Install Node.js 22.x'
    
    # Cache npm packages for faster builds
    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(npm_config_cache)
      displayName: 'Cache npm packages'
    
    # Install dependencies
    - task: CmdLine@2
      displayName: 'Install dependencies'
      inputs:
        script: |
          echo "Installing dependencies..."
          npm ci
    
    # Run security audit
    - task: CmdLine@2
      displayName: 'Security audit'
      inputs:
        script: |
          echo "Running security audit..."
          npm audit --production || true
      continueOnError: true
    
    # Run tests
    - task: CmdLine@2
      displayName: 'Run tests'
      inputs:
        script: |
          echo "Running tests..."
          # npm test || true  # Uncomment when tests are ready
          echo "Tests placeholder - will run when test suite is ready"
      continueOnError: true
    
    # Build the application
    - task: CmdLine@2
      displayName: 'Build application'
      inputs:
        script: |
          echo "Building application..."
          # If you have a build step, add it here
          # npm run build
          
          # For now, just ensure all files are ready
          echo "Checking application files..."
          ls -la
          
          # Create a deployment-ready structure
          mkdir -p deployment
          cp -r *.js *.json public services monitoring models tests deployment/ 2>/dev/null || true
          
          # Remove dev dependencies and files
          cd deployment
          rm -rf node_modules .git .env tests __tests__ *.test.js
          
          # Install only production dependencies
          npm ci --only=production
          
          echo "Build complete!"
    
    # Start and test the application
    - task: CmdLine@2
      displayName: 'Start app and run smoke tests'
      env:
        PERPLEXITY_API_KEY: $(PERPLEXITY_API_KEY)
        ALPHA_VANTAGE_API_KEY: $(ALPHA_VANTAGE_API_KEY)
        POLYGON_API_KEY: $(POLYGON_API_KEY)
        AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
        AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)
        PORT: $(PORT)
        NODE_ENV: production
        ALLOWED_ORIGINS: $(ALLOWED_ORIGINS)
        SESSION_TIMEOUT: $(SESSION_TIMEOUT)
        CACHE_TTL: $(CACHE_TTL)
        MAX_UPLOAD_SIZE: $(MAX_UPLOAD_SIZE)
      inputs:
        script: |
          echo "Starting application for smoke tests..."
          cd deployment
          
          # Start the app in background
          npm start &
          APP_PID=$!
          
          # Wait for app to start
          echo "Waiting for app to start..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/api/health > /dev/null; then
              echo "App is running!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Run basic smoke tests
          echo "Running smoke tests..."
          
          # Health check
          curl -f http://localhost:3000/api/health || {
            echo "Health check failed!"
            kill $APP_PID
            exit 1
          }
          
          # Basic API test
          curl -f -X POST http://localhost:3000/api/chat \
            -H "Content-Type: application/json" \
            -d '{"message":"test","sessionId":"smoke-test"}' || {
            echo "API test failed!"
            kill $APP_PID
            exit 1
          }
          
          echo "Smoke tests passed!"
          
          # Kill the app
          kill $APP_PID
          
          cd ..
    
    # Create deployment package
    - task: ArchiveFiles@2
      displayName: 'Create deployment package'
      inputs:
        rootFolderOrFile: 'deployment'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
    
    # Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    
    # Send Telegram notification for build
    - task: Bash@3
      displayName: 'Send build notification'
      inputs:
        targetType: 'inline'
        script: |
          if [ "$(Agent.JobStatus)" == "Succeeded" ]; then
            STATUS_EMOJI="‚úÖ"
            BUILD_STATUS="Build Succeeded"
          else
            STATUS_EMOJI="‚ùå"
            BUILD_STATUS="Build Failed"
          fi
          
          DEPLOY_TIME=$(date +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_AUTHOR=$(git log --format='%an' -n 1)
          COMMIT_MESSAGE=$(git log --format='%s' -n 1 | head -c 100)
          COMMIT_HASH=$(git log --format='%h' -n 1)
          
          MSG="$STATUS_EMOJI *FinanceBot Pro Build*\n\n"
          MSG+="*Status:* $BUILD_STATUS\n"
          MSG+="*Pipeline:* $(Build.DefinitionName)\n"
          MSG+="*Branch:* $(Build.SourceBranchName)\n"
          MSG+="*Time:* $DEPLOY_TIME\n"
          MSG+="*Author:* $COMMIT_AUTHOR\n"
          MSG+="*Commit:* \`$COMMIT_HASH\` $COMMIT_MESSAGE\n"
          MSG+="*Build:* [#$(Build.BuildNumber)]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId))"
          
          curl -s -X POST \
            -H 'Content-Type: application/json' \
            -d "{\"chat_id\": \"$TELEGRAM_CHAT_ID\", \"text\": \"$MSG\", \"parse_mode\": \"Markdown\"}" \
            https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage
      env:
        TELEGRAM_BOT_TOKEN: $(TELEGRAM_BOT_TOKEN)
        TELEGRAM_CHAT_ID: $(TELEGRAM_CHAT_ID)
      condition: always()

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: DeployToAzure
    displayName: 'Deploy to Azure App Service'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          # Download artifacts
          - download: current
            artifact: drop
            displayName: 'Download artifacts'
          
          # Deploy to Azure App Service
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: 'Your-Azure-Service-Connection'  # UPDATE THIS
              appType: 'webAppLinux'
              appName: 'your-app-service-name'  # UPDATE THIS
              package: '$(Pipeline.Workspace)/drop/*.zip'
              runtimeStack: 'NODE|22-lts'
              startUpCommand: 'npm start'
              appSettings: |
                -PERPLEXITY_API_KEY $(PERPLEXITY_API_KEY)
                -ALPHA_VANTAGE_API_KEY $(ALPHA_VANTAGE_API_KEY)
                -POLYGON_API_KEY $(POLYGON_API_KEY)
                -AZURE_OPENAI_ENDPOINT $(AZURE_OPENAI_ENDPOINT)
                -AZURE_OPENAI_KEY $(AZURE_OPENAI_KEY)
                -PORT $(PORT)
                -NODE_ENV production
                -ALLOWED_ORIGINS $(ALLOWED_ORIGINS)
                -SESSION_TIMEOUT $(SESSION_TIMEOUT)
                -CACHE_TTL $(CACHE_TTL)
                -MAX_UPLOAD_SIZE $(MAX_UPLOAD_SIZE)
          
          # Post-deployment validation
          - task: CmdLine@2
            displayName: 'Validate deployment'
            inputs:
              script: |
                echo "Waiting for deployment to stabilize..."
                sleep 60
                
                # Replace with your actual URL
                APP_URL="https://your-app-service-name.azurewebsites.net"  # UPDATE THIS
                
                echo "Testing deployed application..."
                if curl -f "$APP_URL/api/health"; then
                  echo "Deployment validation successful!"
                else
                  echo "Deployment validation failed!"
                  exit 1
                fi
          
          # Send deployment notification
          - task: Bash@3
            displayName: 'Send deployment notification'
            inputs:
              targetType: 'inline'
              script: |
                if [ "$(Agent.JobStatus)" == "Succeeded" ]; then
                  STATUS_EMOJI="üöÄ"
                  DEPLOY_STATUS="Deployment Successful"
                  APP_URL="https://your-app-service-name.azurewebsites.net"  # UPDATE THIS
                else
                  STATUS_EMOJI="üî¥"
                  DEPLOY_STATUS="Deployment Failed"
                  APP_URL="N/A"
                fi
                
                DEPLOY_TIME=$(date +"%Y-%m-%d %H:%M:%S UTC")
                
                MSG="$STATUS_EMOJI *FinanceBot Pro Deployment*\n\n"
                MSG+="*Status:* $DEPLOY_STATUS\n"
                MSG+="*Environment:* Production\n"
                MSG+="*Time:* $DEPLOY_TIME\n"
                MSG+="*Version:* $(Build.BuildNumber)\n"
                MSG+="*URL:* $APP_URL\n"
                MSG+="*Triggered by:* $(Build.RequestedFor)"
                
                curl -s -X POST \
                  -H 'Content-Type: application/json' \
                  -d "{\"chat_id\": \"$TELEGRAM_CHAT_ID\", \"text\": \"$MSG\", \"parse_mode\": \"Markdown\"}" \
                  https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage
            env:
              TELEGRAM_BOT_TOKEN: $(TELEGRAM_BOT_TOKEN)
              TELEGRAM_CHAT_ID: $(TELEGRAM_CHAT_ID)
            condition: always()