trigger:
- master

variables:
- group: TradeBot keys    # <-- Links your variable group

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  fetchDepth: 0

- task: NodeTool@0
  inputs:
    versionSpec: '22.x'
  displayName: 'Install Node.js'

- script: |
    npm ci
    # If you have a frontend, add: npm run build
    # If not, this will do nothing (but won't fail)
  displayName: 'Install dependencies and build (if needed)'
  env:
    PERPLEXITY_API_KEY: $(PERPLEXITY_API_KEY)
    ALPHA_VANTAGE_API_KEY: $(ALPHA_VANTAGE_API_KEY)
    POLYGON_API_KEY: $(POLYGON_API_KEY)
    AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
    AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)
    PORT: $(PORT)
    NODE_ENV: $(NODE_ENV)
    ALLOWED_ORIGINS: $(ALLOWED_ORIGINS)
    SESSION_TIMEOUT: $(SESSION_TIMEOUT)
    CACHE_TTL: $(CACHE_TTL)
    MAX_UPLOAD_SIZE: $(MAX_UPLOAD_SIZE)

- script: |
    npm start &
    sleep 5
    # Add here any healthcheck, e.g.: curl http://localhost:3000/health
  displayName: 'Start the app and run a basic smoke test'

- script: |
    ls -lh build || true
    ls -lh dist || true
    ls -lh public || true
  displayName: 'List build/public/dist folders'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'public'  # Change to 'build' or 'dist' if that's your output
    ArtifactName: 'app'
    publishLocation: 'Container'
  condition: succeededOrFailed()

- task: Bash@3
  displayName: 'Send Telegram Notification'
  inputs:
    targetType: 'inline'
    script: |
      BUILD_STATUS=$(if [ "$BUILD_BUILDSTATUS" == "Succeeded" ]; then echo "Succeeded"; else echo "Failed"; fi)
      DEPLOY_TIME=$(date +"%Y-%m-%d %H:%M:%S")
      COMMIT_AUTHOR=$(git log --format='%an' -n 1)
      COMMIT_MESSAGE=$(git log --format='%B' -n 1 | tr -d '\n"\\`')
      MSG="Azure deploy finished!\n\nDeploy details:\nBuild Status: $BUILD_STATUS\nPipeline: $BUILD_DEFINITIONNAME\nBranch: $BUILD_SOURCEBRANCHNAME\nDeploy Time: $DEPLOY_TIME\nCommit Author: $COMMIT_AUTHOR\nCommit Message: $COMMIT_MESSAGE\nTriggered by: $BUILD_REQUESTEDFOR\nURL: $BUILD_BUILDURI"
      curl -s -X POST \
        -H 'Content-Type: application/json' \
        -d "{\"chat_id\": \"$TELEGRAM_CHAT_ID\", \"text\": \"$MSG\"}" \
        https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage
  env:
    TELEGRAM_BOT_TOKEN: $(TELEGRAM_BOT_TOKEN)
    TELEGRAM_CHAT_ID: $(TELEGRAM_CHAT_ID)
    BUILD_BUILDSTATUS: $(Build.Status)
    BUILD_DEFINITIONNAME: $(Build.DefinitionName)
    BUILD_SOURCEBRANCHNAME: $(Build.SourceBranchName)
    BUILD_REQUESTEDFOR: $(Build.RequestedFor)
    BUILD_BUILDURI: $(Build.BuildUri)
  condition: always()
