class IntentClassifier {
    constructor() {
        this.financialKeywords = [
            // Stock/Investment terms
            'stock', 'stocks', 'share', 'shares', 'equity', 'securities',
            'investment', 'invest', 'investing', 'investor', 'portfolio',
            'trading', 'trade', 'trader', 'buy', 'sell', 'purchase',
            'market', 'markets', 'exchange', 'nasdaq', 'nyse', 'dow',
            
            // Financial metrics
            'price', 'prices', 'value', 'valuation', 'worth', 'cost',
            'dividend', 'dividends', 'earnings', 'revenue', 'profit', 'loss',
            'pe ratio', 'p/e', 'p/e ratio', 'p e ratio', 'market cap', 'capitalization',
            'volume', 'volatility', 'beta', 'alpha',
            
            // Market conditions
            'bull', 'bear', 'rally', 'correction', 'crash', 'bubble',
            'support', 'resistance', 'breakout', 'trend', 'momentum',
            'oversold', 'overbought', 'dip', 'surge', 'spike',
            
            // Analysis types
            'analysis', 'analyze', 'technical', 'fundamental',
            'chart', 'charts', 'indicator', 'indicators',
            'moving average', 'rsi', 'macd', 'bollinger',
            
            // Cryptocurrency (expanded)
            'crypto', 'cryptocurrency', 'bitcoin', 'btc', 'ethereum', 'eth',
            'blockchain', 'defi', 'nft', 'altcoin', 'stablecoin', 'mining',
            'dogecoin', 'doge', 'litecoin', 'ltc', 'ripple', 'xrp',
            'cardano', 'ada', 'solana', 'sol', 'polygon', 'matic',
            'avalanche', 'avax', 'chainlink', 'link', 'uniswap', 'uni',
            'polkadot', 'dot', 'binance', 'bnb', 'tether', 'usdt',
            'shiba', 'shib', 'coin', 'coins', 'token', 'tokens',
            'wallet', 'exchange', 'coinbase', 'binance', 'kraken',
            'hodl', 'pump', 'dump', 'moon', 'lambo', 'diamond hands',
            'to the moon', 'hold', 'hodling', 'rekt', 'fomo',
            
            // Financial instruments
            'etf', 'mutual fund', 'bond', 'bonds', 'options', 'futures',
            'derivatives', 'commodity', 'commodities', 'forex',
            
            // Forex trading
            'currency', 'currencies', 'exchange rate', 'fx', 'usd', 'eur', 'gbp',
            'jpy', 'chf', 'cad', 'aud', 'nzd', 'dollar', 'euro', 'pound',
            'yen', 'franc', 'loonie', 'aussie', 'kiwi', 'pair', 'pairs',
            'eurusd', 'gbpusd', 'usdjpy', 'usdchf', 'usdcad', 'audusd', 'nzdusd',
            'major pairs', 'minor pairs', 'cross currency', 'pip', 'pips', 'spread',
            
            // Commodities
            'gold', 'silver', 'platinum', 'palladium', 'copper', 'oil', 'crude',
            'brent', 'wti', 'natural gas', 'gas', 'energy', 'metals', 'precious metals',
            'wheat', 'corn', 'soybeans', 'coffee', 'sugar', 'cotton', 'agriculture',
            'agricultural', 'livestock', 'cattle', 'cocoa', 'rice', 'oats',
            
            // Financial institutions
            'bank', 'broker', 'brokerage', 'hedge fund', 'pension',
            'insurance', 'credit', 'loan', 'mortgage', 'debt',
            
            // Economic terms
            'economy', 'economic', 'inflation', 'deflation', 'recession',
            'gdp', 'interest rate', 'federal reserve', 'fed', 'treasury',
            
            // Casual financial language
            'whats up with', 'what about', 'how did', 'how is', 'how are',
            'what happened to', 'what happened with', 'performance',
            'doing well', 'doing bad', 'going up', 'going down',
            'last week', 'last month', 'this week', 'this month',
            'today', 'yesterday', 'recent', 'recently', 'lately',
            'gains', 'losses', 'profit', 'loss', 'winner', 'loser',
            'hot', 'cold', 'popular', 'trending', 'outperform',
            'underperform', 'beat', 'miss', 'estimates',
            
            // Portfolio advice terms
            'rebalance', 'rebalancing', 'allocate', 'allocation', 'diversify',
            'diversification', 'risk', 'risky', 'too risky', 'risk tolerance',
            'should i buy', 'should i sell', 'should i invest', 'what should i buy',
            'what should i sell', 'where should i invest', 'recommend', 'recommendation',
            'advice', 'suggest', 'suggestion', 'portfolio advice', 'investment advice',
            
            // Question patterns for stock queries
            'hows', 'how\'s', 'whats', 'what\'s', 'how doing',
            'doing', 'at', 'trading at', 'currently', 'current',
            'latest', 'update', 'status', 'looking', 'looks',
            'think about', 'thoughts on', 'opinion on',
            'worth buying', 'worth selling', 'worth it'
        ];

        this.nonFinancialKeywords = [
            // Cooking & Food (CRITICAL - must catch "teach me to make gluten free pizza")
            'recipe', 'cooking', 'cook', 'bake', 'baking', 'food', 'eat', 'eating', 
            'restaurant', 'pizza', 'gluten free', 'gluten-free', 'pasta', 'bread', 
            'meal', 'dinner', 'lunch', 'breakfast', 'kitchen', 'ingredient', 'ingredients',
            'flour', 'sugar', 'salt', 'pepper', 'spice', 'spices', 'sauce', 'marinade',
            'grill', 'grilling', 'roast', 'roasting', 'fry', 'frying', 'boil', 'boiling',
            'make food', 'prepare food', 'teach me to make', 'how to make', 'how to cook',
            'cooking tips', 'cooking advice', 'culinary', 'chef', 'cuisine',
            
            // Weather & Environment
            'weather', 'temperature', 'rain', 'snow', 'sun', 'sunny', 'cloudy', 'storm',
            'forecast', 'climate', 'hot', 'cold', 'warm', 'cool', 'humidity',
            
            // Personal/Social
            'movie', 'music', 'song', 'book', 'game', 'sport', 'sports',
            'travel', 'vacation', 'hotel', 'flight', 'relationship', 'dating',
            'personal', 'life', 'family', 'friends', 'social', 'birthday',
            'party', 'celebration', 'wedding', 'anniversary', 'gift', 'gifts',
            
            // Technology (non-financial)
            'programming', 'code', 'software', 'hardware', 'computer',
            'internet', 'website', 'app', 'mobile', 'android', 'ios',
            'gaming', 'video game', 'video games', 'technology news',
            
            // Health/Medical
            'health', 'medical', 'doctor', 'hospital', 'medicine',
            'symptom', 'disease', 'treatment', 'therapy', 'fitness',
            'exercise', 'workout', 'diet', 'nutrition', 'vitamin',
            
            // Education
            'school', 'university', 'education', 'learning', 'study',
            'homework', 'exam', 'test', 'grade', 'course', 'class',
            'teacher', 'professor', 'student', 'academic',
            
            // Legal (non-financial)
            'legal', 'law', 'lawyer', 'attorney', 'court', 'lawsuit', 
            'judge', 'jury', 'litigation', 'criminal', 'civil',
            
            // Entertainment
            'tv show', 'television', 'netflix', 'comedy', 'drama', 'horror',
            'actor', 'actress', 'celebrity', 'fashion', 'beauty', 'makeup',
            
            // General life topics
            'how to fix', 'repair', 'maintenance', 'home improvement',
            'garden', 'gardening', 'pet', 'pets', 'animal', 'animals',
            'car repair', 'auto repair', 'mechanical', 'plumbing', 'electrical',
            
            // Explicit non-financial patterns
            'joke', 'funny', 'story', 'riddle', 'poem', 'creative writing',
            'art', 'painting', 'drawing', 'photography', 'design'
        ];

        this.stockSymbolPattern = /\$[A-Z]{1,5}\b|\b(?:aapl|msft|googl|tsla|amzn|meta|nvda|intc|amd|nflx|dis|jpm|bac|wmt|pg|ko|pfe|jnj|xom|cvx|ibm|csco|orcl|crm|adbe|pypl|zm|roku|spot|abnb|coin|hood|gme|amc|pltr|spce|lcid|rivn|apple|microsoft|tesla|amazon|facebook|nvidia|intel|netflix|disney|visa|mastercard|jpmorgan|walmart|pfizer|johnson|exxon|chevron|cisco|oracle|salesforce|adobe|paypal|zoom|spotify|airbnb|coinbase|robinhood|gamestop|palantir|lucid|rivian)\b/gi;
        this.cryptoPattern = /\b(BTC|ETH|ADA|DOT|SOL|MATIC|AVAX|LINK|UNI|AAVE|LTC|XRP|DOGE|BNB|USDT|USDC|SHIB|BITCOIN|ETHEREUM|LITECOIN|RIPPLE|CARDANO|SOLANA|POLKADOT|DOGECOIN|AVALANCHE|CHAINLINK|UNISWAP|POLYGON|BINANCE|TETHER|SHIBA|PEPE|FLOKI|BONK|WIF|POPCAT|MYRO|PONKE)\b/gi;
        this.pricePattern = /\$?\d+(?:\.\d{2})?(?:\s?(?:dollars?|usd|cents?))?/gi;
    }

    classifyIntent(text) {
        const normalizedText = text.toLowerCase();
        const words = normalizedText.split(/\s+/);
        
        let financialScore = 0;
        let nonFinancialScore = 0;
        let totalWords = words.length;
        let keywordMatches = [];
        
        // DEBUG: Log the query
        console.log(`[IntentClassifier] Analyzing: "${text}"`);
        
        // Special handling for common portfolio questions
        const portfolioPatterns = [
            /rebalance/i,
            /am i too risky/i,
            /where should i invest/i,
            /allocate.*portfolio/i,
            /portfolio.*allocation/i,
            /diversify/i,
            /risk assessment/i
        ];
        
        if (portfolioPatterns.some(pattern => pattern.test(text))) {
            console.log(`[IntentClassifier] Portfolio pattern detected`);
            financialScore += 10;
            keywordMatches.push('portfolio pattern');
        }

        // Special handling for single symbol queries like "AAPL?" or "msft?"
        if (totalWords === 1 && text.match(/^[A-Z]{2,5}\?*$/)) {
            return {
                classification: 'financial',
                confidence: 0.95,
                financialScore: 10,
                nonFinancialScore: 0,
                details: {
                    stockSymbols: [text.replace('?', '').toUpperCase()],
                    cryptoSymbols: [],
                    priceReferences: [],
                    keywordMatches: ['single symbol query'],
                    totalWords: 1,
                    isQuestion: text.includes('?'),
                    isGreeting: false,
                    hasFinancialContext: true,
                    hasTemporalContext: false
                }
            };
        }

        // Check for financial keywords with better scoring
        for (const keyword of this.financialKeywords) {
            if (normalizedText.includes(keyword)) {
                const keywordLength = keyword.split(' ').length;
                // Multi-word terms get higher weight, crypto terms get bonus
                let weight = keywordLength;
                if (keyword.includes('bitcoin') || keyword.includes('crypto') || keyword.includes('btc') || 
                    keyword.includes('ethereum') || keyword.includes('eth') || keyword.includes('coin') ||
                    keyword.includes('whats up with') || keyword.includes('what about') || 
                    keyword.includes('how did') || keyword.includes('performance') ||
                    keyword.includes('hows') || keyword.includes('what\'s') || keyword.includes('doing')) {
                    weight += 2; // Bonus for crypto terms and casual language
                }
                // Commodity boost to prevent refusals on gold/silver/oil
                if (keyword.includes('gold') || keyword.includes('silver') || keyword.includes('oil') || 
                    keyword.includes('crude') || keyword.includes('brent') || keyword.includes('wti') || 
                    keyword.includes('natural gas') || keyword.includes('platinum') || keyword.includes('palladium') ||
                    keyword.includes('copper') || keyword.includes('wheat') || keyword.includes('corn') ||
                    keyword.includes('commodity') || keyword.includes('commodities')) {
                    weight += 3; // Extra boost for commodities
                }
                financialScore += weight;
                keywordMatches.push(keyword);
            }
        }

        // Check for non-financial keywords with HIGH penalty
        for (const keyword of this.nonFinancialKeywords) {
            if (normalizedText.includes(keyword)) {
                // CRITICAL: Give very high penalty to non-financial keywords
                const weight = keyword.split(' ').length * 5; // 5x multiplier for non-financial
                
                // Extra penalty for cooking/food terms
                if (keyword.includes('recipe') || keyword.includes('cook') || keyword.includes('pizza') || 
                    keyword.includes('food') || keyword.includes('make') || keyword.includes('teach me')) {
                    nonFinancialScore += weight * 3; // 15x total multiplier for cooking
                } else {
                    nonFinancialScore += weight;
                }
                
                keywordMatches.push(`NON-FINANCIAL: ${keyword}`);
            }
        }

        // Check for stock symbols
        const stockMatches = text.match(this.stockSymbolPattern);
        if (stockMatches) {
            financialScore += stockMatches.length * 3; // Higher weight for symbols
        }

        // Check for crypto symbols with enhanced detection
        const cryptoMatches = text.match(this.cryptoPattern);
        if (cryptoMatches) {
            financialScore += cryptoMatches.length * 4; // Even higher weight for crypto
        }

        // Check for price mentions
        const priceMatches = text.match(this.pricePattern);
        if (priceMatches) {
            financialScore += priceMatches.length * 2;
        }

        // Context-aware scoring adjustments
        if (this.hasFinancialContext(normalizedText)) {
            financialScore += 3;
        }

        // Temporal context boosts (last week, this month, etc.)
        if (this.hasTemporalContext(normalizedText)) {
            financialScore += 2;
        }

        // Special patterns for "How's X doing?" type queries
        if (this.hasStockQueryPattern(normalizedText)) {
            financialScore += 4;
            keywordMatches.push('stock query pattern');
        }

        // Calculate confidence with improved algorithm
        const totalScore = financialScore + nonFinancialScore;
        let classification;
        let confidence;
        
        console.log(`[IntentClassifier] Scores - Financial: ${financialScore}, Non-Financial: ${nonFinancialScore}`);

        if (totalScore === 0) {
            classification = 'ambiguous';
            confidence = 0.3;
        } else if (financialScore > nonFinancialScore) {
            classification = 'financial';
            confidence = Math.min(financialScore / (totalScore + 1), 0.95);
        } else if (nonFinancialScore > financialScore) {
            classification = 'non-financial';
            confidence = Math.min(nonFinancialScore / (totalScore + 1), 0.95);
        } else {
            classification = 'ambiguous';
            confidence = 0.5;
        }

        // Boost confidence for strong financial indicators
        if (stockMatches || cryptoMatches || priceMatches) {
            if (classification === 'financial') {
                confidence = Math.min(confidence + 0.25, 0.98);
            }
        }

        // Special handling for edge cases
        if (this.isGreeting(normalizedText)) {
            classification = 'greeting';
            confidence = 0.9;
        }

        // Improve question handling
        if (this.isQuestion(normalizedText)) {
            if (classification === 'ambiguous' && financialScore === 0) {
                classification = 'non-financial';
                confidence = 0.7;
            } else if (classification === 'financial' && financialScore >= 3) {
                confidence = Math.min(confidence + 0.1, 0.98);
            }
        }

        return {
            classification,
            confidence: Math.round(confidence * 100) / 100,
            financialScore,
            nonFinancialScore,
            details: {
                stockSymbols: stockMatches || [],
                cryptoSymbols: cryptoMatches || [],
                priceReferences: priceMatches || [],
                keywordMatches,
                totalWords,
                isQuestion: this.isQuestion(normalizedText),
                isGreeting: this.isGreeting(normalizedText),
                hasFinancialContext: this.hasFinancialContext(normalizedText),
                hasTemporalContext: this.hasTemporalContext(normalizedText)
            }
        };
    }

    isGreeting(text) {
        const greetings = ['hello', 'hi', 'hey', 'good morning', 'good afternoon', 'good evening'];
        // Only consider it a greeting if it's primarily a greeting, not if greeting words appear in other contexts
        return greetings.some(greeting => text.trim().toLowerCase().startsWith(greeting) || text.trim().toLowerCase() === greeting);
    }

    isQuestion(text) {
        return text.includes('?') || 
               text.startsWith('what') || 
               text.startsWith('how') || 
               text.startsWith('when') || 
               text.startsWith('where') || 
               text.startsWith('why') || 
               text.startsWith('who') ||
               text.startsWith('is') ||
               text.startsWith('can') ||
               text.startsWith('should') ||
               text.startsWith('would') ||
               text.startsWith('could');
    }

    hasFinancialContext(text) {
        const financialContextPatterns = [
            /\b(up|down|rise|fall|increase|decrease|gain|loss|drop|climb|surge|plunge|rally|crash)\b/gi,
            /\b(performance|performing|outperform|underperform|beat|miss|estimate|target)\b/gi,
            /\b(investment|trading|portfolio|market|stock|crypto|bitcoin|ethereum)\b/gi,
            /\b(buy|sell|hold|purchased|sold|bought)\b/gi
        ];
        
        return financialContextPatterns.some(pattern => pattern.test(text));
    }

    hasTemporalContext(text) {
        const temporalPatterns = [
            /\b(last|this|next|past|previous|recent|recently|lately|yesterday|today|tomorrow)\s+(week|month|year|quarter|day|days|weeks|months|years)\b/gi,
            /\b(week|month|year|quarter|day|days|weeks|months|years)\s+(ago|back)\b/gi,
            /\b(ytd|year to date|month to date|week to date)\b/gi,
            /\b(q1|q2|q3|q4|first quarter|second quarter|third quarter|fourth quarter)\b/gi
        ];
        
        return temporalPatterns.some(pattern => pattern.test(text));
    }

    hasStockQueryPattern(text) {
        const stockQueryPatterns = [
            /how('s|s| is) [a-z]+ doing/gi,
            /what('s| is) [a-z]+ (at|doing|trading)/gi,
            /(aapl|msft|googl|tsla|amzn|meta|nvda|bitcoin|ethereum|btc|eth) (price|doing|trading|cost|worth)/gi,
            /how('s|s| is) (the )?market/gi,
            /what('s| about) (the )?(price of|cost of)/gi,
            /(give me|show me|tell me) (the )?(price|cost|value) of/gi
        ];
        
        return stockQueryPatterns.some(pattern => pattern.test(text));
    }

    getFinancialIntentType(text) {
        const normalizedText = text.toLowerCase();
        
        if (normalizedText.includes('price') || normalizedText.includes('cost') || normalizedText.includes('worth')) {
            return 'price_inquiry';
        }
        
        if (normalizedText.includes('buy') || normalizedText.includes('purchase')) {
            return 'buy_intent';
        }
        
        if (normalizedText.includes('sell')) {
            return 'sell_intent';
        }
        
        if (normalizedText.includes('analysis') || normalizedText.includes('analyze')) {
            return 'analysis_request';
        }
        
        if (normalizedText.includes('news') || normalizedText.includes('update')) {
            return 'news_request';
        }
        
        if (normalizedText.includes('compare') || normalizedText.includes('vs')) {
            return 'comparison';
        }

        if (normalizedText.includes('portfolio') || normalizedText.includes('allocation')) {
            return 'portfolio_management';
        }

        if (normalizedText.includes('dividend') || normalizedText.includes('earnings')) {
            return 'fundamental_data';
        }

        return 'general_financial';
    }

    shouldAllowResponse(classification, confidence) {
        // STRICT FINANCIAL ONLY - 100% refusal rate for non-financial
        if (classification === 'financial' && confidence >= 0.6) {
            return { allow: true, reason: 'High-confidence financial query' };
        }

        if (classification === 'greeting' && confidence >= 0.8) {
            return { allow: true, reason: 'Clear greeting message' };
        }

        // BLOCK EVERYTHING ELSE - including ambiguous and low-confidence queries
        return { allow: false, reason: 'Non-financial or ambiguous query - strict financial-only policy' };
    }
}

module.exports = IntentClassifier;